// Code generated by go-bindata.
// sources:
// data/config_schema_v2.1.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfig_schema_v21Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x59\x4f\xb3\xdb\x26\x10\xbf\xfb\x53\xbc\x51\x72\x8b\xff\xa4\x9d\x4c\x67\x9a\x5b\x8f\x3d\xb5\xe7\x7a\x54\x0d\x96\xb0\x4d\x22\x81\x02\xc8\xa9\x93\xf1\x77\x2f\x08\x89\x07\x08\x04\x7e\x56\xfb\x3a\xd3\xcb\x1b\x3f\xf8\xed\xb2\xbb\xec\xfe\x58\xd0\xf7\xd5\xd3\x53\xf6\x96\x95\x67\xd8\x80\xec\xe3\x53\x76\xe6\xbc\xfd\xb8\xdb\x7d\x62\x04\x6f\xd4\xe8\x96\xd0\xd3\xae\xa2\xe0\xc8\x37\xef\x3f\xec\xd4\xd8\x9b\x6c\x2d\xe5\x50\x25\x45\x4a\x82\x8f\xe8\x54\xa8\x99\xe2\xf2\xe3\xf6\x87\xad\x14\x57\x10\x7e\x6d\xa1\x04\x91\xc3\x27\x58\x72\x35\x46\xe1\x97\x0e\x51\x28\x85\xf7\xd9\x05\x52\x86\x04\x3a\x5f\xaf\xe4\x5c\x4b\x49\x0b\x29\x47\x90\x89\x59\x69\x9c\x18\x1b\x21\xe3\x80\xa1\x96\x71\x8a\xf0\x29\xeb\x87\x6f\xbd\x06\x31\xc9\x20\xbd\xa0\xd2\xd0\xa0\x4d\x7d\xb3\x7b\xd6\xbf\xd3\xb0\xb5\xab\xd5\x30\xb6\x1f\x6f\x01\xe7\x90\xe2\xdf\xa7\xb6\xf5\xd3\x7f\xee\xc1\xe6\xdb\x2f\x9b\x3f\xde\x6f\x7e\xde\x16\x9b\xfc\xdd\x5b\x6b\x5a\xc6\x97\xc2\xa3\x5a\xbe\x82\x47\x84\x11\x17\xde\xe8\xf5\x33\x8d\xbc\x0d\xbf\x6e\x7a\x61\x50\x55\x3d\x18\xd4\xd6\xda\x47\x50\x33\x68\xfb\x8c\x21\xff\x4a\xe8\xe7\x98\xcf\x1a\xf6\x4a\x3e\x0f\xeb\x7b\x7c\xb6\xdd\xb9\x90\xba\x6b\xa2\x3b\x38\xa2\x5e\xc9\x19\xb5\xfc\x63\xfb\xb7\x1a\x9d\x9e\xc5\x2a\x84\xb1\x76\x6f\xa0\x95\xed\xbe\x50\xf9\xb2\x2d\x1c\x2b\x1d\xac\x40\x94\x4a\xd0\x16\xc2\x48\x39\xa8\x85\x01\xa5\xe0\x9a\xad\xc5\x92\x1c\x36\xcc\x9a\x1a\x4a\xf3\x26\x26\x3b\x8c\xbe\x74\xf0\xd7\x01\xc2\x69\x07\x75\x88\x06\xbd\x95\x58\x73\x79\xc5\x27\x4a\xba\xb6\x68\x01\x85\x98\xfb\x55\x18\x60\xd2\x34\x00\x57\xee\xce\x13\x0c\x7f\x93\x5b\xbf\x37\x06\x9f\x66\x35\xd9\xf3\x09\x7e\xdc\x0c\xd1\xfc\x39\x99\x2c\xdb\x30\x07\x08\x43\x5a\x60\xd0\xc0\x98\x27\x15\x6c\x21\xae\x58\xa1\x18\x33\x90\xbb\x35\x62\xbc\x20\xc7\x42\xc9\x33\x47\x81\xa6\xcf\x45\xf7\xa3\x52\x79\x1b\xa2\xc3\x5e\x4d\x41\x68\x21\x6d\xcb\x1c\xc1\x82\x41\x40\xcb\xf3\x0b\xe5\x49\x23\xc2\x97\x12\x3b\x91\x28\xf4\xda\x12\xa4\xf2\xe5\x3f\x97\x08\x10\x5f\x8a\x23\xaa\xe1\xcb\xc2\x20\xa4\x11\x25\xb8\x19\xab\x61\x2e\x33\x68\x51\xa1\xb2\x17\x37\xe4\xff\x6a\x09\x83\x6e\x60\x1c\x07\xcd\x29\xed\xaa\x15\x93\x51\x62\x3f\x3a\x2e\x82\x82\xbb\xe6\x00\xa9\x6c\x02\x2c\xe4\x91\xd0\x06\x48\x63\xc7\xb5\x8d\x69\x2b\xd2\x9e\xcc\x33\x03\x68\xfa\xc0\x65\x71\x24\xee\xae\xf5\x5f\xa0\xed\xf0\xda\x33\x23\xeb\xf2\xad\x06\x04\x78\x57\xcf\x1b\x44\x1f\xc9\xba\x1e\xae\xf3\xc4\xc5\x3a\xd0\x89\xac\xdd\x9f\x8d\xab\xe6\x13\x58\xf4\x70\xd3\x2b\x84\xf2\xda\xde\x16\x2a\x34\x89\xa4\xc5\x9f\x97\x67\x1e\xa1\x9e\x82\xe2\x4c\x18\x9f\x63\x20\x37\xf3\xb5\xb8\x14\x4c\x61\x0f\xd4\x80\x53\x1c\xd4\x96\x31\x48\x0d\x0e\xb0\x7e\x91\xa5\x8b\x86\xcf\x50\x4b\x4e\x27\x09\x0d\x95\x72\x20\xa9\xa3\x29\x5d\x51\x24\x9a\xfb\xd4\x8c\x26\xad\xee\x7d\xdc\x85\x6f\x73\xa5\x98\x96\xa9\x96\xc3\x0d\x28\x65\xaf\x43\x21\x0b\x84\xcc\x80\xc2\x46\x64\x6d\x83\xac\x0e\x63\x3f\x32\xda\x5a\xcb\xe4\x8e\x10\xfb\x2a\xfa\x9e\xbb\x05\x87\x06\xba\x68\x48\x15\xca\xb4\x09\x38\x95\xed\xee\x6f\x15\x7a\xb1\x28\xd1\x39\xf3\xf3\xcd\xb8\x86\xc5\x9a\xf2\x88\x37\x21\xf3\x52\xcd\x7c\x36\x77\xde\x4e\x8d\x03\x35\x02\x0c\xc6\xab\x36\x18\x48\x4b\x1b\x6a\x2f\x1f\x12\x33\xd0\x27\xfb\xd3\xac\x6c\x40\x34\xa8\x33\x9d\xea\x23\xaa\x9e\x4d\xc1\x5d\x5d\x7b\x0d\xc9\x27\x63\xf1\x03\xeb\xf1\x93\x48\xab\x6a\x51\x65\x97\xa3\xd9\xa3\x08\x93\x73\xab\xc0\x5a\x42\xf9\xa4\xba\xfe\x9d\x86\x48\x2d\xfd\x70\x3f\xd4\x0a\x06\x16\x8d\xc2\x09\xda\xf7\xba\x03\x21\x35\x04\xd8\x22\x3a\x0a\x41\x25\x2e\x15\xf5\x35\x01\xc9\x38\xa0\xd1\x2b\x17\x83\x65\x47\x11\xbf\x16\x82\xd8\x17\x3f\xf2\xd9\xb9\x29\x18\xfa\x06\xef\x21\x57\xc6\x2b\x84\x85\x35\x10\x47\x5d\x64\x9c\xb4\x42\xff\x49\xe4\x5c\xcc\x4d\xde\xb4\xc7\x17\x5e\x7c\x38\x8f\x07\xbb\xeb\xcf\x90\x60\x16\x7a\xe8\x2d\x81\x81\x15\xfb\xfa\x49\x77\x86\x70\x9f\x2d\x15\x37\x28\x91\x54\xd4\xc7\x53\x5e\x12\x57\x72\x73\x64\x9c\x42\xc4\xd9\x19\x50\x3b\x91\x67\xec\xe8\x05\x18\x39\x72\xbf\x80\x07\xef\x55\xe2\xb4\xcb\x52\xdf\x7a\x30\x64\xd2\x33\xf7\xf8\xbb\xc8\xd4\x35\x23\x0f\xf2\xd9\xcd\xcb\x67\x1d\x8b\xf6\x57\xe6\x63\xdb\xa2\x25\xa8\xf4\x16\x49\x4d\x5e\x26\x1b\x15\x59\x06\x15\xf2\x43\x57\xda\xb7\xe1\xd7\xf0\xce\x01\x71\x39\x79\xa9\x72\xbb\xab\xbd\xd1\xa4\xe5\x2b\x27\x48\xf7\x3f\xb2\x66\x91\xa7\xb6\x11\x16\x7f\x96\x0c\xbc\xb4\xa5\x45\x4c\xa1\x24\x79\x2e\x5e\xfc\x5b\x55\xf8\x73\x07\x53\x3c\xf5\x50\x0b\x9a\xbb\x0c\x9b\xb1\x28\xf9\xa2\x30\x7c\x8d\xf0\xd1\x56\xf8\x5c\x56\xe6\x7a\xcf\xe6\x98\xd5\x71\xdb\x07\x04\xeb\x0e\x22\x2f\xd2\xda\x31\xdf\xe5\xe7\x0e\xd6\xb8\x85\x39\xc2\x0a\x78\xea\xb5\x48\x0b\x8c\xb7\xf4\xc0\xae\xee\xf5\xf9\xb4\xd6\xb1\xca\x93\xb7\x38\x78\xc1\x7e\xd0\xfe\x07\xea\x7d\x78\xe0\x8f\x94\xfb\x80\x72\xab\x7d\xaf\xd3\x65\x6c\x1d\xff\x27\x75\xff\xfa\x59\xb2\xc8\xe6\x3b\x6d\x99\x91\x04\xd3\xfe\x67\x6e\xbf\x92\x6f\x83\x83\x44\x6e\x9b\xe1\xc2\x3c\x1f\x41\x6d\x42\x9b\x3b\xb1\x47\x48\xe0\x76\xe0\x2c\x3a\xbc\x2f\xcd\x7b\xbe\x60\xfa\x6d\xdf\xcd\xd0\xb6\x27\x17\x75\x61\xfd\x43\x7c\xb7\x40\x37\xe4\xdf\x53\x71\x46\x09\x31\x20\x5a\x4d\x6b\x3f\xa7\x5f\xf2\x02\x8c\x63\xc8\x4f\xbe\xeb\x49\x3f\xf1\x75\xd2\x9f\x7f\xb7\xdb\xd4\x43\x87\xea\xca\xba\xfc\x4c\x20\xea\x31\xd3\xa8\xf7\xdc\xbc\x26\x87\xb6\x71\xd0\x3c\xd9\x5b\x4b\xb5\xfc\x9e\x25\x58\xc2\xda\x38\x4f\xd1\xae\xc6\xbf\xb7\xd5\x6d\xf5\x77\x00\x00\x00\xff\xff\x7d\xb9\xdc\x1b\xa9\x20\x00\x00")

func dataConfig_schema_v21JsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfig_schema_v21Json,
		"data/config_schema_v2.1.json",
	)
}

func dataConfig_schema_v21Json() (*asset, error) {
	bytes, err := dataConfig_schema_v21JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config_schema_v2.1.json", size: 8361, mode: os.FileMode(420), modTime: time.Unix(1461243049, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config_schema_v2.1.json": dataConfig_schema_v21Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config_schema_v2.1.json": &bintree{dataConfig_schema_v21Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

