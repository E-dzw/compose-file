// Code generated by go-bindata.
// sources:
// data/config_schema_v2.1.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfig_schema_v21Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x59\x5f\xaf\xdb\x26\x14\x7f\xcf\xa7\xb8\x72\xfb\xd6\xfc\xe9\xa6\x6a\xd2\xfa\xb6\xc7\x3d\x6d\xcf\x8b\x3c\x8b\xd8\x24\xa1\xb5\x81\x02\x4e\x97\x56\xf9\xee\x03\x63\x13\xc0\x60\x9c\x7b\xbd\xdd\x49\x7b\x89\x22\xf8\x9d\xc3\xf9\x7f\x0e\xf8\xfb\xea\xe9\x29\x7b\xcb\xcb\x33\x6c\x40\xf6\xf1\x29\x3b\x0b\x41\x3f\xee\x76\x9f\x38\xc1\x1b\xbd\xba\x25\xec\xb4\xab\x18\x38\x8a\xcd\xfb\x0f\x3b\xbd\xf6\x26\x5b\x2b\x3a\x54\x29\x92\x92\xe0\x23\x3a\x15\x7a\xa7\xb8\xfc\xb8\xfd\x61\xab\xc8\x35\x44\x5c\x29\x54\x20\x72\xf8\x04\x4b\xa1\xd7\x18\xfc\xd2\x22\x06\x15\xf1\x3e\xbb\x40\xc6\x91\x44\xe7\xeb\x95\xda\xa3\x8c\x50\xc8\x04\x82\x5c\xee\x2a\xe1\xe4\xda\x00\x19\x16\x2c\xb6\x5c\x30\x84\x4f\x59\xb7\x7c\xeb\x38\xc8\x4d\x0e\xd9\x05\x95\x16\x07\x23\xea\x9b\xdd\x9d\xff\xce\xc0\xd6\x3e\x57\x4b\xd8\x6e\x9d\x02\x21\x20\xc3\xbf\x8f\x65\xeb\xb6\xff\xdc\x83\xcd\xb7\x5f\x36\x7f\xbc\xdf\xfc\xbc\x2d\x36\xf9\xbb\xb7\xce\xb6\xb2\x2f\x83\x47\x7d\x7c\x05\x8f\x08\x23\x21\xb5\x31\xe7\x67\x06\x79\xeb\xff\xdd\xcc\xc1\xa0\xaa\x3a\x30\xa8\x9d\xb3\x8f\xa0\xe6\xd0\xd5\x19\x43\xf1\x95\xb0\xcf\x29\x9d\x0d\xec\x95\x74\xee\xcf\x0f\xe8\xec\xaa\x73\x21\x75\xdb\x24\x3d\x38\xa0\x5e\x49\x19\x7d\xfc\xcb\xfc\xb7\x1a\x94\x9e\xc4\x6a\x84\x75\x76\x27\xa0\x13\xed\x21\x53\x85\xa2\x2d\x6e\x2b\x63\xac\x88\x95\x4a\x40\x0b\x29\xa4\x5a\x34\xc4\x80\x31\x70\xcd\xd6\xf2\x48\x01\x1b\xee\x6c\xf5\xa9\x79\x93\x9b\x2d\x46\x5f\x5a\xf8\x6b\x0f\x11\xac\x85\xc6\x44\x3d\xdf\x4a\x9e\xb9\x3c\xe3\x13\x23\x2d\x2d\x28\x60\x10\x8b\x30\x0b\x0b\x4c\x9a\x06\xe0\xca\xf7\x3c\xc1\xf0\x37\xe5\xfa\xbd\xb5\xf8\x34\xc9\xc9\xdd\x9f\xa1\xc7\xcd\x22\xcd\xef\xc1\xe4\xc8\x86\x05\x40\x18\xb2\x02\x83\x06\xa6\x34\xa9\x20\x85\xb8\xe2\x85\xae\x98\x91\xd8\xad\x11\x17\x05\x39\x16\x9a\x9e\x7b\x0c\x4c\xf9\x5c\xd4\x1f\x95\x8e\xdb\x58\x39\xec\xd8\x14\x84\x15\x4a\xb6\xcc\x23\x2c\x38\x04\xac\x3c\x3f\x93\x9e\x34\xd2\x7c\x73\x6c\x27\x03\x85\x5d\x29\x41\x3a\x5e\xfe\x73\x81\x00\xf1\xa5\x38\xa2\x1a\x3e\xcf\x0c\x92\x1a\x31\x82\x9b\x21\x1b\xa6\x22\x83\x15\x15\x2a\x3b\x72\x8b\xfe\x2f\x4a\x38\xf4\x0d\xe3\x29\x68\x6f\x19\x55\x1d\x9b\x0c\x14\xfb\x41\x71\x69\x14\xdc\x36\x07\xc8\xd4\x10\xe0\x20\x8f\x84\x35\x40\x09\x3b\x9c\x6d\x6d\x3b\x96\x0e\x44\x9e\x6d\x40\x5b\x07\xd5\x08\x40\x2d\xad\x83\x3f\x2f\x1f\xe2\x92\x3d\x03\xc5\x99\x70\x31\x15\xea\xbe\x89\x0d\xb9\x22\x9c\x13\xa6\xa8\x01\xa7\x34\x88\x96\x29\x48\x0d\x0e\xb0\x7e\x96\xa4\x8b\x9a\xcf\x62\x4b\x4e\x27\x05\x8d\xc5\xcc\xa8\x5b\xf5\xdb\x91\x9e\x65\xf6\x2b\x86\xe4\x14\x99\x30\x87\x41\x13\x6a\x9a\xac\x7f\xf0\xcd\x41\x7b\xc4\xe9\x7e\x3f\x8a\xc7\x06\x94\xaa\xa9\x32\xc8\x23\x26\xb3\xa0\xb0\x91\x51\xdb\x20\xa7\x95\xed\x87\xd4\x59\x1b\x9a\xdc\x23\xe2\x5f\x65\x83\x7d\x98\xb0\x9f\xd4\x8a\x86\x54\xb1\x48\x1b\x81\x7d\xe3\x47\x8b\xe6\xc3\x3d\xa9\x23\xf3\x1c\x15\x9b\xf6\xcc\xfe\xf4\xd4\x67\x60\xa9\xe9\x2f\xa1\x4d\x4c\xbc\xb9\x62\xde\xc5\x9d\x96\xd3\xe0\x40\x8d\x00\x87\xe9\xac\x8d\x1a\xd2\xe1\x86\xe8\xe5\xc3\xcc\x08\x0c\xd1\xfe\x34\x49\x1b\x21\x8d\xf2\x9c\x97\x40\x33\x58\xdd\x45\xc1\x6d\x5d\x07\x05\xc9\x47\x6b\x3e\x6a\xc4\x7b\xbe\x78\xe9\x56\x4e\x51\xe5\xa6\xa3\xdd\x0c\xa5\xc8\xb9\x93\x60\x94\x30\x31\xca\xae\x7f\xa7\xf3\xea\xa3\x5f\xdc\x78\xa9\xac\xc0\x72\x72\x39\x41\xf7\x02\x71\x20\xa4\x86\x00\x3b\x85\x8e\x41\x50\xc9\xe9\xb5\xbe\xce\x40\x72\x01\x58\x72\xb6\xe7\xb0\x6c\x19\x12\xd7\x42\x16\xf6\xc5\x5b\x3e\x3f\x37\x05\x47\xdf\xe0\x23\xc5\x95\x8b\x0a\x61\x29\x0d\xc4\x49\x15\xb9\x20\x54\xf2\x3f\xc9\x98\x4b\xa9\x29\x1a\x7a\x7c\xe6\x84\x2d\x44\xda\xd8\x6d\xd7\x43\xa2\x51\x18\x28\x6f\x33\x2a\xb0\xae\xbe\xe1\xa2\x3b\x51\x70\xef\x92\xca\x51\x5d\x06\x15\x0b\xd5\xa9\x60\x11\xd7\x74\x53\xc5\x78\x4e\x21\xce\xce\x80\xb9\x81\x3c\x21\x47\x47\xc0\xc9\x51\x84\x09\x02\xf8\x20\x13\xf7\xdd\xac\xe3\xb7\xee\x05\xc9\x83\xf8\x87\x8a\xa9\x2f\x46\x1e\xad\x67\xb7\x60\x3d\x6b\x79\x72\xbe\xb2\x5f\x75\x16\x4d\x41\xcd\xb7\x98\x35\xe4\x65\x6a\x50\x51\x69\x50\xa1\x30\xf4\xfe\x88\x33\x3c\x88\xe8\x0b\x35\xc4\xe5\xe8\x49\xc4\x9f\xae\xf6\xd6\x90\x96\xaf\x3c\x23\x3d\xfe\x9a\x97\x25\xde\x74\x06\x58\xfa\xfd\x2b\xf2\xa4\x33\xcf\x62\x1a\xa5\x8a\xe7\xe2\xc9\xbf\xd5\x89\x3f\xd5\x98\xd2\xa1\x87\x28\x68\x1e\x12\x6c\x42\xa2\xd9\x17\x85\xfe\xd9\x3b\x54\xb6\xe2\x7d\x59\x8b\x1b\xec\xcd\x29\xa9\xd3\xb2\xf7\x08\xde\x1e\x64\x5c\xcc\x1b\xc7\x42\x97\x9f\x07\xaa\xc6\x2d\x5e\x23\x1c\x83\xcf\xbd\x16\x19\x82\xe1\x96\x1e\xf1\xea\xde\xf4\xa7\xb5\xb1\x55\x3e\xdb\xc5\xd1\x0b\xf6\x0b\xe5\x7f\x41\xbe\xf7\x2f\xc9\x89\x74\xef\x51\x7e\xb6\xef\x4d\xb8\x0c\xa3\xe3\xff\x24\xef\x5f\x3f\x4a\x16\x71\xbe\x37\x96\x59\x41\x30\x9e\x7f\xa6\xfc\x35\xfb\x36\xd8\x53\xe4\xae\x18\x3e\x2c\xf0\xb5\xcd\x2d\x68\x53\x1d\x7b\x80\x44\x6e\x07\xde\xa1\xfd\xfb\xd2\xb4\xe6\x0b\x86\xdf\xf6\xdd\x44\xd9\x0e\xc4\xa2\x49\xac\x7f\xa8\xde\x2d\x30\x0d\x85\x7d\x2a\x7b\x94\x24\x03\x72\xd4\x74\xfc\x39\xfe\x64\x14\xa9\x38\x16\xfd\xe8\x03\x92\xd2\x13\x5f\x47\xf3\xf9\x77\x77\x4c\x3d\xb4\xa8\xae\x9c\xcb\xcf\x08\xa2\x1f\x33\xad\x7c\xcf\xed\x6b\x72\xcc\x8d\x3d\xe7\x91\x6f\x1d\xd6\xea\xc3\x89\xac\x12\x8e\xe3\x02\x49\xbb\x1a\x7e\x6f\xab\xdb\xea\xef\x00\x00\x00\xff\xff\xd0\x73\xa6\x5a\x12\x1f\x00\x00")

func dataConfig_schema_v21JsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfig_schema_v21Json,
		"data/config_schema_v2.1.json",
	)
}

func dataConfig_schema_v21Json() (*asset, error) {
	bytes, err := dataConfig_schema_v21JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config_schema_v2.1.json", size: 7954, mode: os.FileMode(420), modTime: time.Unix(1461320163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config_schema_v2.1.json": dataConfig_schema_v21Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config_schema_v2.1.json": &bintree{dataConfig_schema_v21Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

