// Code generated by go-bindata.
// sources:
// data/config_schema_v2.1.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfig_schema_v21Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\x59\x4f\x8f\xdc\x26\x14\xbf\xcf\xa7\x58\x39\xb9\x65\xfe\xa4\x55\x54\xa9\xb9\xf5\xd8\x53\x7b\xee\xc8\xb5\x58\x1b\xcf\x90\xd8\x40\x00\x4f\x3a\x89\xe6\xbb\x17\x8c\xcd\x02\x06\xe3\x9d\xb5\xba\x95\x72\x89\x36\xf0\xde\xe3\xfd\xfd\xf9\x07\xf3\x7d\xf3\xf0\x90\xbd\xe5\xe5\x19\xb6\x20\xfb\xf8\x90\x9d\x85\xa0\x1f\x0f\x87\x4f\x9c\xe0\x9d\x5e\xdd\x13\x76\x3a\x54\x0c\xd4\x62\xf7\xfe\xc3\x41\xaf\xbd\xc9\xb6\x4a\x0f\x55\x4a\xa5\x24\xb8\x46\xa7\x42\xef\x14\x97\x9f\xf7\x3f\xed\x95\xba\x16\x11\x57\x0a\x95\x10\x79\xfc\x04\x4b\x21\xd7\xd4\x22\x65\x84\x42\x26\x10\xe4\x72\x4b\x79\x20\xd7\x2e\x90\x71\x24\xb5\xc6\x05\x4b\x97\x0b\x86\xf0\x29\xeb\x97\x6f\xbd\x05\xb9\xc9\x21\xbb\xa0\xd2\xb2\x60\xfc\x79\x73\x78\xb2\x7f\x30\x62\x5b\xdf\xaa\xf1\x68\x58\xa7\x40\x08\xc8\xf0\x9f\x53\xdf\xfa\xed\xbf\x8f\x60\xf7\xed\xb7\xdd\x5f\xef\x77\xbf\xee\x8b\x5d\xfe\xee\xad\xb3\xad\x92\xc8\x60\xad\x8f\xaf\x60\x8d\x30\x12\x32\x1a\x73\x7e\x66\x24\x6f\xc3\x5f\x37\x73\x30\xa8\xaa\x5e\x18\x34\xce\xd9\x35\x68\x38\x74\x63\xc6\x50\x7c\x25\xec\x73\x2a\x66\x23\xf6\x4a\x31\x0f\xe7\x07\x62\x76\xc3\xb9\x90\xa6\x6b\x93\x15\x1c\xa5\x5e\x29\x18\x7d\xfc\xcb\xea\xb7\x19\x83\x9e\x95\xd5\x12\xd6\xd9\xbd\x83\x4e\xb7\x87\x52\x15\xea\xb6\x78\xae\x4c\xb2\x22\x59\x2a\x01\x2d\xa4\x93\x6a\xd1\x28\x03\xc6\xc0\x35\xdb\xca\x23\x05\x6c\xb9\xb3\x35\x8c\xe6\x4d\x6e\x76\x18\x7d\xe9\xe0\xef\x83\x88\x60\x1d\x34\x29\x1a\xec\x56\xf2\xcc\xf5\x0d\x9f\x18\xe9\x68\x41\x01\x83\x58\x84\x4d\x58\xc2\xa4\x6d\x01\xae\xfc\xca\x13\x0c\xff\x50\xa5\x3f\x5a\x8b\x0f\xb3\x96\xdc\xfd\x05\x71\xdc\x2c\xd5\xfc\xa9\x99\x1c\xdf\xb0\x00\x08\x43\x56\x60\xd0\xc2\x54\x24\x15\xa4\x10\x57\xbc\xd0\x88\x19\xe9\xdd\x06\x71\x51\x90\xba\xd0\xfa\xdc\x33\x60\xe0\x73\xd5\x7a\x54\xba\x6f\x63\x70\xd8\x9b\x29\x08\x2b\x94\x6f\x99\xa7\x58\x70\x08\x58\x79\xbe\x53\x9f\xb4\x32\x7d\x4b\x72\x27\x1b\x85\x5d\x29\x41\xba\x5f\xfe\x77\x8d\x00\xf1\xa5\xa8\x51\x03\xef\x4b\x83\xd4\x46\x8c\xe0\x76\x9c\x86\xb9\xce\x60\x45\x85\xca\x5e\xdd\xd2\xff\x87\x12\x0e\xfd\xc4\x78\x01\xda\x5b\x26\x54\x27\x27\xa3\xc6\x71\x0c\x5c\x26\x05\x77\xed\x23\x64\x59\xee\x66\x2f\xab\x09\x6b\x81\x72\x76\x3c\xdb\xda\x76\x32\x1d\xe8\x3c\x3b\x81\x76\x0c\x42\x0d\xc7\xc2\xea\x3a\xff\x8b\xd0\x8e\xa0\x3f\x33\xba\x3e\xde\x1a\x81\x08\xee\x9a\x7d\x0b\xe8\x13\x5d\xd7\x8b\x9b\x3e\xf1\x65\x3d\xd1\x89\x6e\xc6\xe0\x97\x0e\x31\x58\xe9\x1a\x0d\xa7\xe6\x13\xb1\xe4\xc7\xcd\x9c\x10\xeb\x6b\xb7\x2c\x4c\x5a\x92\x4d\x8b\x3f\xaf\x8f\x3c\xd2\x3c\x03\xc5\x99\x70\x31\x87\x40\x7e\xe7\x1b\x75\xa5\xb8\x04\x3d\x50\x0b\x4e\x69\x21\x5a\xa6\x44\x1a\xf0\x08\x9b\xbb\x3c\x5d\x35\x7d\x96\x59\x72\x3a\x29\xd1\xd8\x28\x47\x9a\x3a\xd9\xd2\x15\x43\x92\xdc\x2f\xed\x68\x42\x0d\xf7\xf1\x0f\xbe\xcd\x8d\xe2\xb2\x4e\x75\x02\x6e\x41\xa9\xb8\x0e\x83\x3c\x92\x32\x4b\x14\xb6\xb2\x6b\x5b\xe4\x30\x8c\xe3\x88\x68\x5b\xa3\x93\x7b\x4a\xfc\xab\xe4\x3d\xcf\x56\x1c\x08\x74\xd1\x92\x2a\xd6\x69\x13\xe1\xa5\x68\xf7\x7c\xaa\xd0\xab\x25\x81\xce\xdb\x9f\x27\xe3\x46\x2c\x45\xca\x13\xd1\xc4\xdc\x5b\xea\xe6\x93\xbb\xf3\x7e\x1a\x39\xd0\x20\xc0\x61\x7a\x6a\xa3\x89\x74\xac\x21\x7a\xf9\xb0\xb0\x03\x43\xba\xbf\xcc\xea\x46\x54\xa3\x36\x97\x43\x7d\xc2\xd4\x93\x2b\xb8\x6b\x9a\xa0\x23\xf9\x64\x2d\xfd\xc1\x7a\xf9\x97\xc8\x98\xa2\xa8\x72\xc7\xd1\xe6\x28\xd2\xe5\xdc\x19\x30\x4a\x98\x98\x4c\xd7\x7f\x43\x88\xf4\xd1\x2f\xe6\x43\x54\x22\xb0\x24\x0a\x27\xe8\xde\xeb\x1e\x09\x69\x20\xc0\x0e\xd0\x31\x08\x2a\x79\xa9\x68\xae\x0b\x24\xb9\x00\x2c\x79\xe5\xe2\xb0\xec\x18\x12\xd7\x42\x02\xfb\xea\x9f\x7c\x7e\x6e\x0b\x8e\xbe\xc1\xe7\x80\x2b\x17\x15\xc2\xd2\x1b\x88\x93\x21\x72\x41\xa8\xb4\x7f\x92\x3d\x97\x0a\x53\xb4\xb4\xbe\xf3\xe2\x23\x44\x3a\xd9\x5d\xff\x0d\x89\x76\x61\x00\xde\x16\x20\xb0\x46\xdf\x30\xe8\xce\x00\xee\x93\xa7\xf2\x06\x25\x9b\x8a\x85\x70\x2a\x08\xe2\x5a\x6f\x0e\x8c\x97\x00\x71\x76\x06\xcc\x6d\xe4\x19\x3f\x7a\x05\x4e\x6a\x11\x56\x08\xc8\x07\x8d\x78\x74\x59\xd9\xdb\x0e\x8e\x4c\x38\x73\x2f\xff\x2c\x30\xf5\xdd\xc8\xa3\x78\x76\x0b\xe2\x59\xc7\x93\xfc\xca\x7e\x6c\x5b\x75\x04\xb5\xdd\x62\x11\xc9\xcb\x14\x51\x51\x63\x50\xa1\xb0\xe8\xc6\xc4\x36\xfc\x35\xbc\x73\x40\x5c\x4e\x5e\xaa\x7c\x76\x75\xb4\x48\x5a\xbe\xf1\x92\xf4\xfc\x47\xd6\x2c\xf1\xd4\x36\x8a\xa5\x9f\x25\x23\x2f\x6d\xcb\x32\xa6\xa5\x14\x78\xae\x3e\xfc\x7b\x3d\xf8\x73\x1f\xa6\x74\xeb\x21\x0a\xda\x05\x37\x06\x67\x77\xdd\x0b\x83\xfe\xf9\x21\x8e\x16\x6e\xb3\x27\x66\xef\xde\x4b\x85\x51\x18\xef\xb8\x91\x62\x1d\x0d\xba\x6f\x4d\x76\x72\xb7\x72\x33\x25\x8b\x5e\x4f\xa3\x0c\x61\x99\xff\x2f\x98\x96\xe1\x79\x3c\x31\x2c\x83\x94\x3f\x2b\x47\xd3\x20\x23\xf1\xfa\x41\xa6\xe6\xf5\xbb\x64\x95\xe2\x7b\xa4\xc6\x6a\x82\x29\x7b\x98\xab\xd7\xe2\xbb\xd4\xa0\x91\xbb\x6e\xf8\x62\x81\x9f\x10\x5d\x9a\x3e\xf7\xbd\x1b\x45\x22\xdc\xda\x3b\x74\x78\x9d\x99\x8f\x7c\xc5\xf6\xdb\xbf\x0b\x71\xb5\x78\x2f\x9a\xc1\x8a\x33\x8a\x3b\xf0\x62\x1b\xa8\xea\xdd\x5c\x22\x5c\x53\x89\xea\x52\x0d\x48\xa2\xe6\xd4\x73\xfa\x3b\x58\x04\x71\x2c\xfd\xc9\xaf\x62\x2a\x4e\x7c\x9d\xb0\xdb\xef\x2e\xc9\x7b\xec\x50\x53\x39\x57\x87\x89\x88\x7e\x0a\xb4\xe6\x3d\xb7\x2f\x99\xb1\x32\x0e\x96\x27\xb5\x75\x4c\xab\x5f\x83\x24\x4a\x38\x85\x0b\x0c\xed\x66\xfc\xf7\xb6\xb9\x6d\xfe\x0d\x00\x00\xff\xff\xc5\xbb\x07\x44\xcc\x1f\x00\x00")

func dataConfig_schema_v21JsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfig_schema_v21Json,
		"data/config_schema_v2.1.json",
	)
}

func dataConfig_schema_v21Json() (*asset, error) {
	bytes, err := dataConfig_schema_v21JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config_schema_v2.1.json", size: 8140, mode: os.FileMode(420), modTime: time.Unix(1461149476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config_schema_v2.1.json": dataConfig_schema_v21Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config_schema_v2.1.json": &bintree{dataConfig_schema_v21Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

