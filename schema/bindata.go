// Code generated by go-bindata.
// sources:
// data/config_schema_v3.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfig_schema_v3Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xcf\x92\xdb\x28\x13\xbf\xfb\x29\x54\x4a\x6e\xf1\xcc\xa4\xea\x4b\x7d\x55\x9b\xdb\x1e\xf7\xb4\x7b\xde\x29\x85\x62\xa4\xb6\x87\x04\x01\x01\xe4\x19\x27\xe5\x77\xdf\x42\xff\x8c\x10\x08\x6c\x2b\x9b\x1c\xf6\x32\xe5\x81\xee\xa6\xbb\xf9\xd1\xdd\x34\xfa\xbe\xc9\xb2\xfc\xad\x2a\x9f\xa1\xc6\xf9\xc7\x2c\x7f\xd6\x5a\x7c\x7c\x78\xf8\xac\x38\xbb\xeb\x46\xef\xb9\xdc\x3f\x54\x12\xef\xf4\xdd\xfb\x0f\x0f\xdd\xd8\x9b\x7c\x6b\xf8\x48\x65\x58\x4a\xce\x76\x64\x8f\xba\x19\x74\xf8\xdf\xbd\x61\xee\x08\xf4\x51\x80\x21\xe1\x4f\x9f\xa1\xd4\xdd\x98\x84\xaf\x0d\x91\x60\x58\x1f\xf3\x03\x48\x45\x38\xcb\x8b\xed\xc6\xcc\x09\xc9\x05\x48\x4d\x40\xe5\x1f\x33\xa3\x5a\x96\x8d\x24\xc3\x80\x25\x56\x69\x49\xd8\x3e\x6f\x87\x4f\xad\x84\x2c\xcb\x15\xc8\x03\x29\x2d\x09\xa3\xa2\x6f\x1e\xce\xf2\x1f\x46\xb2\xad\x2b\xd5\x52\xb6\x1d\x17\x58\x6b\x90\xec\xaf\xb9\x6e\xed\xf4\xa7\x47\x7c\xf7\xed\xf7\xbb\xbf\xdf\xdf\xfd\x76\x8f\xee\x8a\x77\x6f\x27\xd3\xc6\xbb\x12\x76\xdd\xf2\x15\xec\x08\x23\x9a\x70\x36\xae\x9f\x8f\x94\xa7\xfe\xd7\x69\x5c\x18\x57\x55\x4b\x8c\xe9\x64\xed\x1d\xa6\x0a\xa6\x36\x33\xd0\x2f\x5c\x7e\x89\xd9\x3c\x92\xfd\x24\x9b\xfb\xf5\x3d\x36\x4f\xcd\x39\x70\xda\xd4\xd1\x1d\x1c\xa8\x7e\x92\x31\xdd\xf2\xb7\xed\xdf\x66\x30\x7a\x91\xb6\xa3\xb0\xd6\x6e\x15\x9c\xa0\xdd\xe7\x2a\x1f\xda\xc2\xbe\x1a\x9d\x15\xf0\x52\x05\x82\xf2\xa3\x19\x0b\xf8\xa3\x23\xa8\x81\xe9\x7c\x74\x41\x96\xe5\x4f\x0d\xa1\x95\xeb\x51\xce\xe0\x4f\x23\xe2\xd1\x1a\xcc\xb2\xef\xee\xc1\xb6\xe4\xb4\xf3\x93\xff\xc2\x1b\x3e\xce\x07\x6c\x19\xe7\x4b\xce\x34\xbc\xea\xd6\xa8\xe5\xa5\x3b\x17\xf0\xf2\x0b\xc8\x1d\xa1\x90\xca\x81\xe5\x5e\x2d\xb8\x8c\x12\xa5\x11\x97\xa8\x22\xa5\xce\x4f\x0e\xfb\x4c\x5e\x1c\x4f\x23\xab\xf5\x5f\xb1\xf1\x08\xcc\x4b\x2c\x10\xae\xaa\x89\x1d\x58\x4a\x7c\xcc\xb7\x59\x4e\x34\xd4\xca\x6f\x62\x96\x37\x8c\x7c\x6d\xe0\x8f\x9e\x44\xcb\x06\x5c\xb9\x95\xe4\x62\x7d\xc1\x7b\xc9\x1b\x81\x04\x96\x06\x60\xcb\xee\xcf\x4b\x5e\xd7\x98\xad\x85\xba\x4b\xec\x48\xf0\x3c\x67\x1a\x13\x06\x12\x31\x5c\xc7\x80\x64\x4e\x1d\xb0\x4a\xa1\x2e\xff\x2d\xc2\x68\x87\x3a\x7e\xe5\x08\x18\x93\xe1\xaa\xfb\x51\xb1\x25\x60\x77\x62\x0c\xb4\x8d\x6e\xb9\xc3\x88\x14\x60\x59\x3e\x5f\xc9\xcf\x6b\x4c\x58\x8a\xef\x80\x69\x79\x14\x9c\x74\x78\xf9\xe5\x80\x00\xec\x80\xc6\x58\x72\xb1\x1b\x80\x1d\x88\xe4\xac\x1e\x4e\x43\x4a\x80\x19\x83\xbc\xe1\x7f\x15\x5c\x81\xeb\x18\xc7\x40\x7b\x6a\x34\x75\xe2\x93\x81\xe3\x71\x30\x7c\x9b\xe5\xac\xa9\x9f\x40\x9a\x92\x6e\x42\xb9\xe3\xb2\xc6\x46\xd9\x61\x6d\x6b\x7a\xe2\x69\x0f\xf2\x6c\x07\xda\x36\x98\xb4\x8e\x29\xa2\x84\x7d\x59\x1f\xe2\xf0\xaa\x25\x46\xcf\x5c\xe9\xf4\x18\x6e\xb1\x1b\xc6\x14\x98\x92\x1a\xef\xe3\x44\xa2\x8c\x91\x50\xfc\x04\xf4\x2a\x4d\x57\x75\x9f\x25\x96\xef\xf7\x86\x34\x84\x99\x59\xed\xd1\x4f\xc7\xb2\x76\x25\xc9\x01\x64\x6a\x0a\xe6\xe2\x5c\x32\xb9\x93\xf1\x12\x22\x8b\xd7\x8f\x13\xd2\x4f\xf7\x5d\xf9\xb8\x70\x2e\xda\x5f\x94\xe6\x85\x9b\xf0\x33\x27\x73\xfb\x46\x1c\x0b\xd3\x4a\x82\xc9\xae\xd4\xb8\x34\x99\x5f\x82\x0a\xec\xab\x45\x0a\x35\xa2\xa4\x26\x7a\x6a\xd1\xd9\x8e\x9e\xa7\x70\x98\xd4\x0b\x16\x97\x33\xf6\x97\x03\x54\xf3\x2a\x74\x1c\x66\xc4\xee\x4e\x04\x23\xfb\xc5\x89\x33\xbb\xaa\xde\x4c\x02\x4a\xf4\xc2\x11\xb1\x26\xa4\x5e\xaa\x9a\x67\x75\xe3\x80\x6e\xe9\x30\x25\x58\x41\x3c\xb4\x04\x1d\x39\x91\x46\xc4\xe1\x43\x22\x02\x7d\xbc\xff\x5f\xe4\x0d\xb0\x06\x65\xa6\xd7\xd4\x11\x51\x67\x55\xda\xc3\xed\x53\xa4\x88\x9c\xed\x1f\x5c\xf2\x0b\x52\x85\x23\x53\x1b\x8f\xec\x03\x26\xb8\xd4\xb3\xd3\xf5\xef\x94\x07\xdd\xd2\x37\x57\x07\x42\x92\x03\xa1\xb0\x87\xe9\x2d\xe7\x89\x73\x0a\x98\x4d\x02\x9d\x04\x5c\x21\xce\xe8\x31\x81\x52\x69\x2c\xa3\x17\x10\x05\x65\x23\x89\x3e\x22\x2e\xf4\xea\x75\x89\x7a\xae\x91\x22\xdf\xe0\x92\xe0\xaa\x74\x45\x18\xe2\x02\x58\xd4\x44\xa5\xb9\x40\x8a\xec\x19\xa6\x51\x33\x0d\xe9\x5e\xe2\x12\x90\x00\x49\x78\xe5\x63\xd8\xda\x7b\x5b\x35\x12\x1b\x3c\x4f\xc4\xe8\x5a\xec\xae\xbc\x4d\x68\x1d\xdf\xb3\xa6\x4d\x45\x41\x30\x7b\xa2\x64\x42\x20\xef\x82\xb8\x3f\x76\x2f\xc4\xed\xb3\xa6\x84\x69\xd8\x83\xf4\x85\xbb\x85\x42\x65\xb9\x4e\x49\x28\x50\x9e\xb1\x9c\xee\xd2\x82\x1e\x2d\x83\xe2\x3b\xed\x67\xf0\x95\x2f\x5e\xbd\x26\x1d\xdf\x56\xde\xb6\x57\xa4\xf0\xd2\x5f\x14\x93\x5d\x35\x8a\x60\x58\x3c\x79\xc3\x62\xa3\xa2\xb5\xa4\xdd\x8f\x5c\xf5\x24\x9b\x12\xc6\x20\xbb\x22\x7e\x15\x36\xa3\xba\xfd\xaf\xbe\x1f\x00\xac\x9c\xf5\xe7\xdc\xba\xeb\xd1\x2a\xdf\x8a\x8d\x63\xf7\x05\xad\x65\xab\xad\x17\xe9\x31\x5a\x94\x6e\x9b\xf1\x71\xc4\xed\x90\x6c\xce\xcd\xd9\x40\xbf\x71\xa1\x0c\xb4\x80\x25\x28\x29\xb1\x8a\x01\xfa\x86\xbb\x51\x23\x2a\xac\x01\x75\x6f\x1c\x17\x85\x90\x85\xd8\x21\xb0\xc4\x94\x02\x25\xaa\x4e\x39\x8b\x79\x05\x14\x1f\xaf\x8a\xad\x2d\xfb\x0e\x13\xda\x48\x40\xb8\xd4\xfd\x43\x4a\xa4\xe6\xca\x6b\xce\x88\xe6\x5e\x50\xa6\x2d\x59\xe3\x57\x34\x2c\xdb\x92\x4c\x44\xf5\xb9\xea\x14\xcc\xf1\xa9\xd7\x1a\x0b\x09\x8a\x37\xb2\x9c\x39\xfb\xea\x2d\x3a\xe7\x8c\x00\x62\x86\x15\x67\xa6\x4b\x50\x20\x0f\x78\xbc\x75\x46\xf9\xa3\x21\xaa\x2f\x3a\x90\xe0\x94\x94\xc7\xb5\x2c\x2c\x39\xeb\x9c\x9c\x02\x88\x1b\x11\x68\xe0\x60\x52\x6a\x2d\x74\xf4\xb0\xb6\x0c\x2f\x84\x55\xfc\xe5\x82\x05\xd7\x83\x92\xa0\xb8\x04\x27\xde\xdd\xea\x68\xa5\x25\x26\x4c\x5f\x9c\x41\x6e\x35\xeb\x86\xb8\x3f\xe2\x33\x12\xf5\x47\xba\xf8\x33\x5c\x20\xd2\x97\xa2\x49\x69\x45\x70\xe9\x05\xe0\x82\x8d\x89\xaf\xa6\x31\x0b\x07\xb2\x15\x92\x5a\x52\xeb\xaa\xa7\x32\x77\x87\xd5\x8b\xd6\x78\x7b\xaa\x88\xc7\x23\x22\x70\xbd\xd6\xe1\x48\x6e\xe6\xe5\xde\x14\x9c\x2d\x5f\x4b\xb3\xf0\xd5\x34\xa6\x75\x5c\xf7\x9e\x42\x35\x4f\x0c\xfc\x37\xc2\x79\xb1\xea\x7b\x23\x4c\xaf\x76\x4f\xe1\xda\xf6\xb6\x98\x37\x74\xd2\x03\xbb\xfa\x38\xde\xab\xb6\xa3\xaf\x8a\xe4\x2d\x0e\x36\xc1\xd7\xd3\xff\xc2\xfa\xee\x86\xb0\xd8\xbf\xfa\x47\x42\x46\x4f\xf5\x5f\xc4\xf8\x65\xf0\xb5\x90\x13\xaf\xbc\x1c\x5c\x00\x1a\xa7\x81\x61\x81\x67\xde\x29\x58\xda\xe7\xe4\xf6\x6b\xcf\x51\x4c\xd5\x70\xc9\x3c\x5f\x54\x4d\x43\xe8\xd2\xdd\x76\x20\x09\xb4\xe3\x9c\x45\x7b\xe7\x2d\x5b\xbe\x22\x6c\xef\xdf\x2d\x24\x8a\xa5\x47\x99\x1f\x14\x61\x57\xe8\x1b\xf8\xf7\xd4\x29\x2e\x07\xef\xce\x3f\x0b\x0a\x44\x2a\x8b\x7f\xf6\x91\x90\xb1\x93\x1d\x67\x9d\xac\xef\xd3\x86\x4e\xf7\x81\x4f\x31\xf1\x8f\x43\xd2\x3d\x71\x5a\x71\xa2\xb0\xeb\xed\xd0\x36\x7a\x3f\x1d\x72\xdb\x49\xc3\x27\x3c\xc5\xf2\x61\xdf\x0c\x7f\x4f\x9b\xd3\xe6\x9f\x00\x00\x00\xff\xff\xe5\xa7\xda\x8f\xf4\x28\x00\x00")

func dataConfig_schema_v3JsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfig_schema_v3Json,
		"data/config_schema_v3.json",
	)
}

func dataConfig_schema_v3Json() (*asset, error) {
	bytes, err := dataConfig_schema_v3JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config_schema_v3.json", size: 10484, mode: os.FileMode(420), modTime: time.Unix(1477696350, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config_schema_v3.json": dataConfig_schema_v3Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config_schema_v3.json": &bintree{dataConfig_schema_v3Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

