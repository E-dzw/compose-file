// Code generated by go-bindata.
// sources:
// data/config_schema_v2.1.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfig_schema_v21Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x4d\xb3\xdb\x26\x17\xde\xfb\x57\xdc\x51\xb2\x8b\x3f\xf2\xbe\x93\xe9\x4c\xb3\xeb\xb2\xab\x76\x5d\x8f\xa2\xc1\xd2\xb1\x4d\x22\x01\x01\xe4\xd4\xc9\xf8\xbf\x17\x84\x24\x83\x04\x42\xbe\x57\xed\xed\xa2\x1b\x8f\x07\xce\x39\x9c\x6f\x1e\x8e\x7e\xac\x9e\x9e\x92\xb7\x22\x3f\x43\x85\x92\x8f\x4f\xc9\x59\x4a\xf6\x71\xb7\xfb\x2c\x28\xd9\x98\xd5\x2d\xe5\xa7\x5d\xc1\xd1\x51\x6e\xde\x7f\xd8\x99\xb5\x37\xc9\x5a\xf3\xe1\x42\xb3\xe4\x94\x1c\xf1\x29\x33\x3b\xd9\xe5\xff\xdb\xff\x6d\x35\xbb\x21\x91\x57\x06\x9a\x88\x1e\x3e\x43\x2e\xcd\x1a\x87\xaf\x35\xe6\xa0\x99\xf7\xc9\x05\xb8\xc0\x8a\x3a\x5d\xaf\xf4\x1e\xe3\x94\x01\x97\x18\x84\xda\xd5\xca\xa9\xb5\x8e\xa4\x5b\xb0\xc4\x0a\xc9\x31\x39\x25\xcd\xf2\xad\x91\xa0\x36\x05\xf0\x0b\xce\x2d\x09\xbd\xaa\x6f\x76\x77\xf9\xbb\x9e\x6c\x3d\x94\x6a\x29\xdb\xac\x33\x24\x25\x70\xf2\xfb\x58\xb7\x66\xfb\xd3\x1e\x6d\xbe\xff\xb2\xf9\xe3\xfd\xe6\xe7\x6d\xb6\x49\xdf\xbd\x75\xb6\xb5\x7f\x39\x1c\xcd\xf1\x05\x1c\x31\xc1\x52\x59\xd3\x9f\x9f\xf4\x94\xb7\xf6\xdf\xad\x3f\x18\x15\x45\x43\x8c\x4a\xe7\xec\x23\x2a\x05\xb8\x36\x13\x90\xdf\x28\xff\x12\xb3\xb9\x27\x7b\x25\x9b\xdb\xf3\x3d\x36\xbb\xe6\x5c\x68\x59\x57\xd1\x08\x76\x54\xaf\x64\x8c\x39\xfe\x65\xf1\x5b\x75\x46\x4f\xd2\x1a\x0a\xeb\xec\x46\x41\x27\xdb\x7d\xae\xf2\x65\x5b\xd8\x57\xbd\xb3\x02\x5e\xca\x11\xcb\x94\x92\x7a\xb1\x67\x46\x9c\xa3\x6b\xb2\x56\x47\x4a\xa8\x84\xb3\xd5\x96\xe6\x4d\x6d\xd6\x04\x7f\xad\xe1\xd7\x96\x44\xf2\x1a\x7a\x17\xb5\x72\x0b\x75\xe6\xf2\x82\x4f\x9c\xd6\x2c\x63\x88\x03\x91\x7e\x11\x16\x31\xad\x2a\x44\x8a\x61\xe4\x29\x81\xdf\x74\xe8\xf7\xd6\xe2\xd3\xa4\x24\x77\x7f\x86\x1d\x37\x8b\x35\xbd\x27\x93\xa3\x1b\x91\x08\x13\xe0\x19\x41\x15\xc4\x2c\x29\x80\x01\x29\x44\x66\x3a\x66\x20\x77\x4b\x2c\x64\x46\x8f\x99\xe1\x17\x03\x01\x7d\xfb\x5c\x34\x1e\x85\xc9\xdb\x50\x3b\x6c\xc4\x64\x94\x67\x5a\xb7\x64\xc0\x98\x09\x40\x3c\x3f\x3f\x93\x9f\x56\xca\x7d\x73\x7c\xa7\x12\x85\x5f\x19\xc5\x26\x5f\xfe\x75\x89\x00\xe4\x92\x1d\x71\x09\xcf\x73\x83\xe2\xc6\x9c\x92\xaa\xab\x86\xa9\xcc\xe0\x59\x81\xf3\x86\xdd\xe2\xff\x93\x51\x01\x43\xc7\x0c\x0c\xb4\xb7\x7a\x53\x1d\x9f\x74\x1c\xfb\xce\x70\xe5\x14\x52\x57\x07\xe0\x1a\x04\x38\x94\x47\xca\x2b\xa4\x95\xed\xce\xb6\xb6\x1d\x4f\x7b\x32\xcf\x76\xa0\x6d\x83\xbe\x08\x50\xa9\xbc\x43\xbe\x2c\x9f\xe2\x4a\x3c\x47\xd9\x99\x0a\x39\x95\xea\x43\x17\xf7\xec\x9a\x71\x4e\x9a\xe2\x0a\x9d\xe2\x44\x2c\x8f\x91\x94\xe8\x00\xe5\xb3\x34\x5d\xd4\x7d\x96\x58\x7a\x3a\x69\xd2\x50\xce\x8c\x6e\xab\x76\x3b\x70\x67\xf5\xfb\x05\xc7\x0a\x45\x46\xdc\xd1\x53\x53\x76\xbf\x64\x87\x9b\x61\x94\xe1\x2a\x34\x89\x38\x1c\xd2\x4f\x5b\x03\x38\x26\xea\xa2\xf9\x57\x96\x49\x7a\xf3\x88\x18\xaf\xb9\x2b\x03\x0b\xe3\xa0\xa4\x65\xba\x47\xa5\x42\xb9\xbe\xf9\x39\x88\x40\x5c\x2d\x52\xa8\x54\x69\x55\x58\xba\x16\xdd\xed\x68\x79\xd2\x01\x93\xf8\xa6\x50\xc0\xc3\x8c\x2d\x9c\xcc\x2a\x5a\x84\xca\x61\x44\x3c\x8c\x44\xb0\xb3\x3f\x7c\x71\x36\x6c\x83\x60\xc4\x92\x65\x66\xa2\x44\x21\x6a\xc4\x9a\x90\x7a\x73\xd5\xbc\xab\x1b\x4f\xe8\x86\x0e\x95\x18\x09\x88\xb7\x96\xa0\x23\x1d\x69\x98\x5d\x3e\xcc\xcc\x40\x1f\xef\x4f\x93\xbc\x01\xd6\xa0\xcc\x79\x05\x34\x43\xd4\x5d\x95\xa6\xb8\x7d\x8a\xa4\x91\xda\xf6\xc8\x9e\xaf\x5e\x1c\x6f\x30\x5c\x84\x3b\x53\xd3\x8f\xec\x02\x63\x94\xcb\x51\x75\xfd\x33\xf0\xc0\x1c\xfd\x62\x74\xc0\xd4\x35\xa1\xe0\xd5\x09\xdc\x57\xce\x81\xd2\x12\x10\x71\x1a\x1d\x07\x54\x28\x88\x5d\x5e\x67\x50\x0a\x89\x78\xf4\x01\x22\x20\xaf\x39\x96\xd7\x4c\xdd\x3e\x8b\xe3\x12\x71\xae\x32\x81\xbf\xc3\x23\xcd\x55\xc8\x02\x13\xa5\x0d\x90\xa8\x89\x42\x52\xa6\xe4\x9f\x54\xce\xc5\xcc\x94\x15\x3b\x3e\xf3\x19\x20\x65\xdc\xd9\x75\x73\x87\x04\xb3\xd0\xd3\xde\x66\x74\x60\xd3\x7d\xfd\x4d\x77\xa2\xe1\xde\x35\x55\xef\x09\x95\x54\xdc\xd7\xa7\x26\x10\xc6\x34\xc0\x98\x81\x2c\xce\x88\xbb\x89\x3c\xa1\x47\xc3\x20\xe8\x51\xfa\x19\x7c\xb8\xc3\xab\x97\x33\xdc\x6b\xe4\xad\x5b\x45\x52\x2f\xfd\x43\xcd\x74\xa8\x46\x1a\xec\x67\x37\x6f\x3f\xab\x45\x14\x04\xda\xa3\xa7\x45\x4b\xd0\xc8\xcd\x66\x21\xd1\x44\x03\x15\x5d\x06\x05\xf6\x93\xae\x7a\xdb\xba\xa9\x8d\x79\xf5\x03\xc9\x47\x73\x9b\x21\xba\xda\x5b\x20\x2d\x5d\x0d\x9c\xf4\xf8\xc8\x31\x89\x0c\x9e\x3a\xb2\xe1\xe0\x69\xdf\xa7\x77\x77\x99\xdc\xc7\x75\x81\x09\xd4\x3c\xdf\x19\x2a\xdd\x46\x17\x6f\x03\x71\xa4\x9e\xc6\x93\x10\x33\x54\x3d\xa4\xd8\x84\x46\xb3\xdf\x35\xed\x94\xde\xd7\xc0\xc2\x37\xb4\x51\xd7\x7b\x4b\xc7\xb4\x8e\xeb\xde\x52\x88\xfa\xa0\x32\x64\x1e\x30\xf3\xbd\xd5\x1e\xe8\x1f\xb7\x70\xb7\x70\x1c\x3e\xf7\x81\xd4\x33\x74\x43\x85\x40\x54\xf7\xfd\x4d\xb5\xee\x7d\x95\xce\x0e\x71\x70\x1e\xf0\x42\xfd\x5f\x50\xf9\xed\xe0\x3b\x52\xf8\x2d\xd5\x7f\x75\xdf\x4a\x79\xfd\x2c\x59\x24\xf8\x03\x80\x66\x25\xc1\x18\x09\x4d\xc5\x6b\xf6\xbb\xb0\xe5\x48\x5d\x35\x86\x64\x9e\x8f\x83\x6e\x43\x9b\xba\xbb\x3b\x92\xc0\x3b\x61\x70\x68\x3b\x0e\x9b\xb6\x7c\xc1\xf4\xdb\xbe\x9b\x68\xdb\x53\xd3\xa2\xbf\xa9\xdf\x2d\x80\x8b\xfc\x31\x55\x77\x94\x62\x43\x0a\x74\x3a\xf1\x1c\x7f\xe1\x0a\x74\x1c\x8b\x7f\xf4\xbd\x4b\xdb\x49\xae\x23\xa4\xfe\xc3\x05\xac\x87\x1a\x97\x85\xf3\x0c\x1a\x91\x98\xd9\xab\x55\xef\xa9\xfd\x60\x0e\x85\xb1\x95\x3c\x8a\xad\x23\x5a\x7f\xe7\x51\x5d\xc2\x09\x9c\xa7\x68\x57\xdd\xef\x6d\x75\x5b\xfd\x15\x00\x00\xff\xff\xd6\x73\x94\x67\xc1\x1f\x00\x00")

func dataConfig_schema_v21JsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfig_schema_v21Json,
		"data/config_schema_v2.1.json",
	)
}

func dataConfig_schema_v21Json() (*asset, error) {
	bytes, err := dataConfig_schema_v21JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config_schema_v2.1.json", size: 8129, mode: os.FileMode(436), modTime: time.Unix(1472234745, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config_schema_v2.1.json": dataConfig_schema_v21Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config_schema_v2.1.json": &bintree{dataConfig_schema_v21Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

